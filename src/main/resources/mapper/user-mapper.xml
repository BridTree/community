<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.UserMapper">
<!--    提炼字段，便于引用-->
    <sql id="selectFields">
        id, username, password, salt, email, type, status, activation_code,header_url,create_time
    </sql>

    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code,header_url,create_time
    </sql>
<!--    id里是对应方法名 mybatis就会知道这个sql是为这个方法服务的-->
<!--    resultType里只写User是因为在配置文件里，有个mybatis-...-package已经告诉其包在哪里了-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}

    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>
<!--        如果参数复杂需要parameterType声明  然后keyProperty表名id字段对应属性-->
<!--    key里的id是mybatis从数据库获取到的,给User填进去的-->
<!--    valuse里是User的属性-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})
    </insert>

    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>
</mapper>
